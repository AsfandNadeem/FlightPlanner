{"version":3,"sources":["webpack:///src/app/user/login/login.component.ts","webpack:///src/app/admin/flights/flights.component.html","webpack:///src/app/admin/cities/cities.component.css","webpack:///src/app/shared/admin.service.ts","webpack:///src/app/user/user.component.ts","webpack:///src/app/admin/cities/cities.component.ts","webpack:///src/app/app.component.css","webpack:///src/environments/environment.ts","webpack:///src/app/shared/user.service.ts","webpack:///src/app/shared/auth.guard.ts","webpack:///src/app/admin/cities/cities.component.html","webpack:///src/app/admin/admin-login/admin-login.component.ts","webpack:///src/app/user/flight-plan/flight-plan.component.html","webpack:///src/app/user/user.component.html","webpack:///src/app/admin/flights/flights.component.ts","webpack:///src/app/admin/flights/flights.component.css","webpack:///src/app/admin/admin.component.html","webpack:///src/app/user/sign-up/sign-up.component.ts","webpack:///src/app/app.component.ts","webpack:///src/app/admin/admin.component.ts","webpack:///src/app/shared/auth-interceptor.ts","webpack:///src/app/admin/admin-login/admin-login.component.html","webpack:///src/app/app.component.html","webpack:///src/app/user/login/login.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/user/flight-plan/flight-plan.component.css","webpack:///src/app/user/flight-plan/flight-plan.component.ts","webpack:///src/app/user/sign-up/sign-up.component.css","webpack:///src/app/user/user.component.css","webpack:///src/app/user/sign-up/sign-up.component.html","webpack:///src/app/admin/admin-login/admin-login.component.css","webpack:///src/app/app-routing.module.ts","webpack:///src/app/user/login/login.component.css","webpack:///src/app/admin/admin.component.css","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["LoginComponent","userService","router","emailRegex","message","getLoginErrors","subscribe","error","getIsAuth","navigate","form","console","log","value","email","password","invalid","login","selector","template","AdminService","http","isadmin","origins","originsUpdated","destinations","destinationsUpdated","selectedCity","_id","name","country","userName","post","apiBaseUrl","response","then","origin","destination","cost","get","pipe","originData","cities","map","maxCities","transformedOriginsData","next","asObservable","id","destinationData","transformedDestinationsData","providedIn","UserComponent","CitiesComponent","adminService","getOrigins","originSub","getOriginsUpdateListener","addCity","cityName","countryname","res","showSucessMessage","setTimeout","resetForm","err","serverErrorMessages","environment","production","UserService","logInErrorSubject","isAuthenticated","isadvertiserAuthenticated","authStatusListener","selectedUser","fullName","token","localStorage","getItem","userId","user","expiresInDuration","expiresIn","setAuthTimer","userN","username","now","Date","expirationDate","getTime","saveAuthData","duration","tokenTimer","logout","userNam","setItem","toISOString","removeItem","clearTimeout","clearAuthData","AuthGuard","authService","route","state","isAuth","AdminLoginComponent","FlightsComponent","OriginControl","required","DestinationControl","CostControl","event","getDestinations","destinationSub","getDestinationsUpdateListener","addFlight","reset","SignUpComponent","postUser","status","join","providers","AppComponent","title","AdminComponent","AuthInterceptor","req","authToken","getToken","authRequest","clone","headers","set","handle","AppModule","declarations","imports","provide","useClass","multi","bootstrap","FlightPlanComponent","routes","path","component","children","redirectTo","pathMatch","canActivate","AppRoutingModule","forRoot","exports","bootstrapModule","webpackEmptyAsyncContext","Promise","resolve","e","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport {Router} from '@angular/router';\n\n\nimport {UserService} from \"../../shared/user.service\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  message = '';\n  constructor(private userService: UserService, private router: Router) {\n    this.userService.getLoginErrors().subscribe(error => {\n      this.message = error;\n    });\n  }\n\n  ngOnInit(): void {\n    if (this.userService.getIsAuth()) {\n      this.router.navigate(['/flightplan']);\n    }\n  }\n\n  onLogin(form: NgForm) {\n    console.log(form.value.email + '' + form.value.password);\n    if (form.invalid) {\n      return;\n    }\n    this.userService.login(form.value.email, form.value.password)\n  }\n\n}\n","export default \"\\n<mat-card style=\\\"width: 40%;\\\">\\n    <form [formGroup]=\\\"form\\\" (submit)=\\\"onSaveFlight()\\\" >\\n        <table>\\n            <tr>\\n<mat-form-field appearance=\\\"fill\\\">\\n    <mat-label>Origin</mat-label>\\n    <mat-select formControlName=\\\"OriginControl\\\" required (selectionChange)=\\\"getDestinations($event.value)\\\">\\n        <mat-option>--</mat-option>\\n        <mat-option *ngFor=\\\"let origin of origins\\\" [value]=\\\"origin\\\">\\n            {{origin.name}}\\n        </mat-option>\\n    </mat-select>\\n    <mat-error *ngIf=\\\"form.get('OriginControl').invalid\\\">Please select an Origin.</mat-error>\\n\\n\\n</mat-form-field>\\n            </tr>\\n            <tr>\\n    <mat-form-field appearance=\\\"fill\\\">\\n\\n    <mat-label>Destination</mat-label>\\n    <mat-select formControlName=\\\"DestinationControl\\\" required >\\n        <mat-option>--</mat-option>\\n        <mat-option *ngFor=\\\"let destination of destinations\\\" [value]=\\\"destination\\\">\\n            {{destination.name}}\\n        </mat-option>\\n    </mat-select>\\n        <mat-error *ngIf=\\\"form.get('DestinationControl').invalid\\\">Please select a Destination.</mat-error>\\n    </mat-form-field>\\n            </tr>\\n            <tr>\\n    <mat-form-field>\\n        <mat-label>Cost</mat-label>\\n        <input\\n                matInput\\n                type=\\\"number\\\"\\n                formControlName=\\\"CostControl\\\"\\n                placeholder=\\\"40000\\\"\\n        >\\n        <mat-error *ngIf=\\\"form.get('CostControl').invalid\\\">Please enter a Cost.</mat-error>\\n    </mat-form-field>\\n            </tr>\\n            <tr>\\n        <input type=\\\"submit\\\" value=\\\"Save Flight\\\">\\n            </tr>\\n        </table>\\n    </form>\\n\\n    <div class=\\\"success\\\" *ngIf=\\\"showSucessMessage\\\">\\n        {{successMessage}}\\n    </div>\\n\\n    <!-- Error message -->\\n    <div class=\\\"alert\\\" *ngIf=\\\"serverErrorMessages\\\">\\n        {{serverErrorMessages}}\\n    </div>\\n\\n\\n</mat-card>\";","export default \".custom-scroll-bar{\\r\\n    height:30vh;\\r\\n    overflow-y:scroll;\\r\\n    overflow-x: hidden;\\r\\n}\\r\\n\\r\\n.custom-scroll-bar::-webkit-scrollbar{\\r\\n    width: 5px;\\r\\n}\\r\\n\\r\\n.custom-scroll-bar::-webkit-scrollbar-thumb{\\r\\n    background: rgba(0,0,0,.26);\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNpdGllcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksV0FBVztJQUNYLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSwyQkFBMkI7QUFDL0IiLCJmaWxlIjoiY2l0aWVzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY3VzdG9tLXNjcm9sbC1iYXJ7XHJcbiAgICBoZWlnaHQ6MzB2aDtcclxuICAgIG92ZXJmbG93LXk6c2Nyb2xsO1xyXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG59XHJcblxyXG4uY3VzdG9tLXNjcm9sbC1iYXI6Oi13ZWJraXQtc2Nyb2xsYmFye1xyXG4gICAgd2lkdGg6IDVweDtcclxufVxyXG5cclxuLmN1c3RvbS1zY3JvbGwtYmFyOjotd2Via2l0LXNjcm9sbGJhci10aHVtYntcclxuICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsLjI2KTtcclxufSJdfQ== */\";","import { Injectable } from '@angular/core';\n\nimport {Router} from '@angular/router';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {map} from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n\nimport { environment } from '../../environments/environment';\nimport {City} from \"./city.model\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  isadmin = false;\n\n  private origins: City [] = [];\n  private originsUpdated = new Subject<{origins: City[], maxCities: number}>();\n  private destinations: City [] = [];\n  private destinationsUpdated = new Subject<{destinations: City[], maxCities: number}>();\n  constructor(private http: HttpClient, private router: Router) { }\n    selectedCity: City = {\n      _id: '',\n        name: '',\n        country: '',\n    };\n\n  login(userName: string, password: string) {\n    this.http.post<{message: string}>(\n        environment.apiBaseUrl+'/admin/login',\n        {userName, password})\n        .subscribe( response => {\n           this.isadmin = true;\n          this.router.navigate(['/cities']).then();\n        } , error => {\n          console.log('invalid admin');\n            this.isadmin = false;\n          this.router.navigate(['/admin']).then();\n        });\n\n  }\n\n  addCity(name: string, country: string)\n  {\n      console.log(name + '' + country);\n      return this.http.post(environment.apiBaseUrl+'/admin/city',\n          {name, country});\n  }\n\n    addFlight(origin: string, destination: string, cost: number)\n    {\n        console.log(origin + '' + destination + '' + cost);\n        return this.http.post(environment.apiBaseUrl+'/admin/addflight',\n            {origin, destination, cost});\n    }\n\n    getOrigins() {\n        this.http\n            .get<{message: string, cities: any, maxCities: number}>(\n                environment.apiBaseUrl+'/admin/getOrigin'\n            )\n            .pipe(map((originData) => {\n                return { origins: originData.cities.map((origin: { name: any; _id: any; }) => {\n                        return {\n                            name: origin.name,\n                            _id: origin._id,\n                        };\n                    }), maxCities: originData.maxCities  };\n            }))// change rterieving data\n            .subscribe(transformedOriginsData => {\n                this.origins = transformedOriginsData.origins;\n                this.originsUpdated.next({\n                    origins: [...this.origins],\n                        maxCities: transformedOriginsData.maxCities\n                    }\n                );\n            });\n    }\n\n    getOriginsUpdateListener() {\n        return this.originsUpdated.asObservable();\n    }\n\n    getDestinations(id: string) {\n      console.log(id);\n        this.http\n            .get<{message: string, cities: any, maxCities: number}>(\n                environment.apiBaseUrl+'/admin/getDestination/'+ id\n            )\n            .pipe(map((destinationData) => {\n                return { destinations: destinationData.cities.map((destination: { name: any; _id: any; }) => {\n                        return {\n                            name: destination.name,\n                            _id: destination._id,\n                        };\n                    }), maxCities: destinationData.maxCities  };\n            }))// change rterieving data\n            .subscribe(transformedDestinationsData => {\n                this.destinations = transformedDestinationsData.destinations;\n                this.destinationsUpdated.next({\n                    destinations: [...this.destinations],\n                        maxCities: transformedDestinationsData.maxCities\n                    }\n                );\n            });\n    }\n\n    getDestinationsUpdateListener() {\n        return this.destinationsUpdated.asObservable();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport {NgForm} from \"@angular/forms\";\nimport {AdminService} from \"../../shared/admin.service\";\nimport {Subscription} from \"rxjs\";\n\nimport {City} from \"../../shared/city.model\";\n\n@Component({\n  selector: 'app-cities',\n  templateUrl: './cities.component.html',\n  styleUrls: ['./cities.component.css']\n})\nexport class CitiesComponent implements OnInit {\n  showSucessMessage: boolean;\n  serverErrorMessages: string;\n\n    origins: City[] = [];\n    private originSub: Subscription;\n  constructor(public adminService: AdminService) { }\n\n  ngOnInit(): void {\n      this.adminService.getOrigins();\n      this.originSub = this.adminService.getOriginsUpdateListener()\n          .subscribe((originData: { origins: City[] }) => {\n              this.origins = originData.origins;\n          });\n  }\n\n  addCity(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n    this.adminService.addCity(form.value.cityName, form.value.countryname).subscribe(\n        res => {\n          this.showSucessMessage = true;\n          setTimeout(() => this.showSucessMessage = false, 4000);\n          this.adminService.getOrigins();\n          this.resetForm(form);\n        },\n        err => {\n            this.serverErrorMessages = 'Something went wrong';\n        }\n    );\n  }\n\n  resetForm(form: NgForm) {\n    this.adminService.selectedCity = {\n        _id: '',\n      name: '',\n      country: ''\n    };\n    form.resetForm();\n    this.serverErrorMessages = '';\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LmNzcyJ9 */\";","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiBaseUrl: 'http://localhost:3000/api'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {Subject} from 'rxjs';\n\nimport {Router} from '@angular/router';\n\n\nimport { environment } from '../../environments/environment';\nimport {User} from './user.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private logInErrorSubject = new Subject<string>();\n  private isAuthenticated = false;\n  private isadvertiserAuthenticated = false;\n  private token: any;\n  private tokenTimer: any;\n  private userId: any;\n  private authStatusListener = new Subject<boolean>();\n  userN: any;\n  message: any;\n  selectedUser: User = {\n    fullName: '',\n    email: '',\n    password: ''\n  };\n  constructor(private http: HttpClient, private router: Router) { }\n  public getLoginErrors(): Subject <string> {\n    return this.logInErrorSubject;\n  }\n  getToken() {\n    return this .token;\n  }\n\n  getName() {\n    return localStorage.getItem('username');\n  }\n  getIsAuth() {\n    return this.isAuthenticated;\n  }\n\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n\n  getUserId() {\n    return this.userId;\n  }\n  getMessage() {\n    console.log(this.message);\n    return this.message;\n  }\n\n  postUser(user: User){\n    return this.http.post(environment.apiBaseUrl+'/user/register',user);\n  }\n\n\n  login(email: string, password: string) {\n    return this.http.post<{token: string, expiresIn: number, userId: string, username: string}>(\n        environment.apiBaseUrl+ '/user/login',\n        {email, password})\n        .subscribe( response => {\n          const token = response.token;\n          console.log(response);\n          this.token = token;\n          if (token) {\n            const expiresInDuration = response.expiresIn;\n            this.setAuthTimer(expiresInDuration);\n            this.isAuthenticated = true;\n            this.userId = response.userId;\n            this.userN = response.username;\n            this.authStatusListener.next(true);\n            const now = new Date();\n            const expirationDate = new Date(now.getTime() + (expiresInDuration * 100000));\n            this.saveAuthData( token, expirationDate,\n                this.userId, this.userN);\n            this.message = '';\n            this.logInErrorSubject.next(this.message);\n            this.router.navigate(['/flightplan']).then();\n          }\n        } , error => {\n          this.message = 'invalid Email or Password';\n          this.logInErrorSubject.next(this.message);\n          console.log('error');\n        });\n\n  }\n\n  private setAuthTimer( duration: number ) {\n    console.log('Setting timer:' + duration);\n    this.tokenTimer = setTimeout(() => {\n          this.logout();\n        },\n        duration * 100000);\n  }\n\n  private saveAuthData(token: string, expirationDate: Date, userId: string, userNam: string) {\n    localStorage.setItem('token', token);\n    localStorage.setItem('expiration', expirationDate.toISOString());\n    localStorage.setItem('userId', userId);\n    localStorage.setItem('username', userNam);\n  }\n\n  private clearAuthData() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expiration');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('username');\n  }\n\n  logout() {\n    this.token = null;\n    this.isAuthenticated = false;\n    this.authStatusListener.next(false);\n    this.userId = null;\n    this.userN = null;\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n    this.router.navigate(['/']);\n\n  }\n\n}\n","import {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {Injectable} from '@angular/core';\nimport {UserService} from \"./user.service\";\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: UserService, private router: Router) {}\n\n  canActivate(\n      route: ActivatedRouteSnapshot,\n      state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    const isAuth = this.authService.getIsAuth();\n    if (!isAuth) {\n      this.router.navigate(['/login']);\n    }\n    return true;\n  }\n}","export default \"\\r\\n<mat-card style=\\\"width: 40%;\\\">\\r\\n    <form #cityForm=\\\"ngForm\\\" (ngSubmit)=\\\"cityForm.valid && addCity(cityForm)\\\">\\r\\n        <input type=\\\"text\\\" #cityName=\\\"ngModel\\\" [(ngModel)]=\\\"adminService.selectedCity.name\\\" name=\\\"cityName\\\" placeholder=\\\"City Name\\\"\\r\\n               required  [ngClass]=\\\"{'invalid-textbox' :cityForm.submitted && !cityName.valid }\\\">\\r\\n        <div *ngIf=\\\"cityForm.submitted && !cityName.valid\\\">\\r\\n            <label class=\\\"validation-message\\\">This field is required.</label>\\r\\n        </div>\\r\\n        <input type=\\\"text\\\" #countryname=\\\"ngModel\\\" [(ngModel)]=\\\"adminService.selectedCity.country\\\" name=\\\"countryname\\\" placeholder=\\\"Country Name\\\"\\r\\n                required [ngClass]=\\\"{'invalid-textbox' :cityForm.submitted && !countryname.valid }\\\">\\r\\n        <div *ngIf=\\\"cityForm.submitted && countryname.errors\\\">\\r\\n            <label *ngIf=\\\"countryname.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\r\\n           </div>\\r\\n        <input type=\\\"submit\\\" value=\\\"Add City\\\">\\r\\n    </form>\\r\\n\\r\\n    <!-- Success message -->\\r\\n    <div class=\\\"success\\\" *ngIf=\\\"showSucessMessage\\\">\\r\\n        Saved successfully\\r\\n    </div>\\r\\n\\r\\n    <!-- Error message -->\\r\\n    <div class=\\\"alert\\\" *ngIf=\\\"serverErrorMessages\\\">\\r\\n        {{serverErrorMessages}}\\r\\n    </div>\\r\\n\\r\\n    <mat-list role=\\\"list\\\" class=\\\"custom-scroll-bar\\\">\\r\\n        <mat-list-item *ngFor=\\\"let item of origins\\\"> {{item.name}}</mat-list-item>\\r\\n    </mat-list>\\r\\n</mat-card>\\r\\n\";","import { Component, OnInit } from '@angular/core';\nimport {NgForm} from \"@angular/forms\";\nimport {AdminService} from \"../../shared/admin.service\";\n@Component({\n  selector: 'app-admin-login',\n  templateUrl: './admin-login.component.html',\n  styleUrls: ['./admin-login.component.css']\n})\nexport class AdminLoginComponent implements OnInit {\n\n  constructor(private adminService: AdminService) { }\n\n  ngOnInit(): void {\n  }\n\n  onLogin(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n    this.adminService.login(form.value.email, form.value.password);\n  }\n}\n","export default \"\\n<mat-card style=\\\"width: 40%;\\\">\\n    <form [formGroup]=\\\"form\\\" (submit)=\\\"getPlans\\\" >\\n        <table>\\n            <tr>\\n                <mat-form-field appearance=\\\"fill\\\">\\n                    <mat-label>Origin</mat-label>\\n                    <mat-select formControlName=\\\"OriginControl\\\" required (selectionChange)=\\\"getDestinations($event.value)\\\">\\n                        <mat-option>--</mat-option>\\n                        <mat-option *ngFor=\\\"let origin of origins\\\" [value]=\\\"origin\\\">\\n                            {{origin.name}}\\n                        </mat-option>\\n                    </mat-select>\\n                    <mat-error *ngIf=\\\"form.get('OriginControl').invalid\\\">Please select an Origin.</mat-error>\\n\\n\\n                </mat-form-field>\\n            </tr>\\n            <tr>\\n                <mat-form-field appearance=\\\"fill\\\">\\n\\n                    <mat-label>Destination</mat-label>\\n                    <mat-select formControlName=\\\"DestinationControl\\\" required >\\n                        <mat-option>--</mat-option>\\n                        <mat-option *ngFor=\\\"let destination of destinations\\\" [value]=\\\"destination\\\">\\n                            {{destination.name}}\\n                        </mat-option>\\n                    </mat-select>\\n                    <mat-error *ngIf=\\\"form.get('DestinationControl').invalid\\\">Please select a Destination.</mat-error>\\n                </mat-form-field>\\n            </tr>\\n\\n            <tr>\\n                <input type=\\\"submit\\\" value=\\\"Generate Plan\\\">\\n            </tr>\\n        </table>\\n    </form>\\n\\n    <div class=\\\"success\\\" *ngIf=\\\"showSucessMessage\\\">\\n        {{successMessage}}\\n    </div>\\n\\n    <!-- Error message -->\\n    <div class=\\\"alert\\\" *ngIf=\\\"serverErrorMessages\\\">\\n        {{serverErrorMessages}}\\n    </div>\\n\\n\\n</mat-card>\";","export default \"\\n<div class=\\\"wrapper fadeInDown\\\">\\n    <div id=\\\"formContent\\\">\\n        <h2 class=\\\"inactive underlineHover\\\">User</h2>\\n        <router-outlet></router-outlet>\\n    </div>\\n</div>\";","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, NgForm, Validators} from '@angular/forms';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {AdminService} from \"../../shared/admin.service\";\n\n\n\ninterface City {\n  name: string;\n  _id: string;\n}\n\n@Component({\n  selector: 'app-flights',\n  templateUrl: './flights.component.html',\n  styleUrls: ['./flights.component.css']\n})\nexport class FlightsComponent implements OnInit {\n\n  origins: City[] = [];\n  private originSub: Subscription;\n\n  destinations: City[] = [];\n  private destinationSub: Subscription;\n  form = new FormGroup({\n    OriginControl: new FormControl('', Validators.required),\n    DestinationControl: new FormControl('', Validators.required),\n    CostControl: new FormControl('', Validators.required)\n  });\n  showSucessMessage: boolean;\n  serverErrorMessages: string;\n  successMessage : string;\n\n  constructor(public adminService: AdminService) {\n  }\n\n  ngOnInit(): void {\n    this.adminService.getOrigins();\n    this.originSub = this.adminService.getOriginsUpdateListener()\n        .subscribe((originData: { origins: City[] }) => {\n          this.origins = originData.origins;\n        });\n  }\n\n\n\n  getDestinations(event: any) {\n    this.adminService.getDestinations(event._id);\n    this.destinationSub = this.adminService.getDestinationsUpdateListener()\n        .subscribe((destinationData: { destinations: City[] }) => {\n          this.destinations = destinationData.destinations;\n        });\n  }\n\n  onSaveFlight() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.adminService.addFlight(this.form.value.OriginControl._id,\n        this.form.value.DestinationControl._id,\n        this.form.value.CostControl).subscribe(\n        res => {\n          this.showSucessMessage = true;\n          setTimeout(() => this.showSucessMessage = false, 4000);\n          this.form.reset();\n        },\n        err => {\n          this.serverErrorMessages = 'Something went wrong';\n        }\n    );\n\n\n  }\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJmbGlnaHRzLmNvbXBvbmVudC5jc3MifQ== */\";","export default \"\\n<div class=\\\"wrapper\\\">\\n    <div id=\\\"formContent\\\">\\n        <h2 class=\\\"inactive underlineHover\\\">Admin</h2>\\n        <router-outlet></router-outlet>\\n    </div>\\n</div>\";","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport {UserService} from \"../../shared/user.service\";\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css'],\n  providers : [UserService]\n})\nexport class SignUpComponent implements OnInit {\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  showSucessMessage: boolean;\n  serverErrorMessages: string;\n\n  constructor(public userService: UserService) { }\n\n  ngOnInit(): void {\n  }\n  onSubmit(form: NgForm) {\n    this.userService.postUser(form.value).subscribe(\n        res => {\n          this.showSucessMessage = true;\n          setTimeout(() => this.showSucessMessage = false, 4000);\n          this.resetForm(form);\n        },\n        err => {\n          if (err.status === 422) {\n            this.serverErrorMessages = err.error.join('<br/>');\n          }\n          else\n            this.serverErrorMessages = 'Something went wrong';\n        }\n    );\n  }\n\n  resetForm(form: NgForm) {\n    this.userService.selectedUser = {\n      fullName: '',\n      email: '',\n      password: ''\n    };\n    form.resetForm();\n    this.serverErrorMessages = '';\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'AngularFrontEnd';\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import {HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\nimport {Injectable} from '@angular/core';\r\nimport {UserService} from \"./user.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n    constructor(private authService: UserService) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n        const authToken = this.authService.getToken();\r\n        const authRequest = req.clone({\r\n            headers: req.headers.set('authorization', 'Bearer ' + authToken)\r\n        });\r\n        return next.handle(authRequest);\r\n    }\r\n}","export default \"\\n\\n    <form (submit)=\\\"onLogin(loginForm)\\\" #loginForm=\\\"ngForm\\\" >\\n            <input\\n                    type=\\\"text\\\"\\n                    placeholder=\\\"admin username\\\"\\n                    name=\\\"email\\\"\\n                    ngModel\\n                    #emailInput=\\\"ngModel\\\"\\n                    required\\n\\n            >\\n        <div *ngIf=\\\"loginForm.submitted && !emailInput.valid\\\">\\n            <label class=\\\"validation-message\\\">This field is required.</label>\\n        </div>\\n            <input\\n                    type=\\\"password\\\"\\n                    placeholder=\\\"Password\\\"\\n                    name=\\\"password\\\"\\n                    ngModel\\n                    #passwordInput=\\\"ngModel\\\"\\n                    required\\n\\n            >\\n        <div *ngIf=\\\"loginForm.submitted && passwordInput.errors\\\">\\n            <label *ngIf=\\\"passwordInput.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\n        </div>\\n\\n        <input type=\\\"submit\\\" value=\\\"Login\\\">\\n\\n    </form>\";","export default \"<router-outlet></router-outlet>\";","export default \"<form #signUpForm=\\\"ngForm\\\" (ngSubmit)=\\\"signUpForm.valid && onLogin(signUpForm)\\\">\\n    <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"userService.selectedUser.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\"\\n           required [pattern]=\\\"emailRegex\\\"  [ngClass]=\\\"{'invalid-textbox' :signUpForm.submitted && !email.valid }\\\">\\n    <div *ngIf=\\\"signUpForm.submitted && email.errors\\\">\\n        <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\n        <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\n    </div>\\n    <input type=\\\"password\\\" #password=\\\"ngModel\\\" [(ngModel)]=\\\"userService.selectedUser.password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\n           minlength=\\\"4\\\" required [ngClass]=\\\"{'invalid-textbox' :signUpForm.submitted && !password.valid }\\\">\\n    <div *ngIf=\\\"signUpForm.submitted && password.errors\\\">\\n        <label *ngIf=\\\"password.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\n        <label *ngIf=\\\"password.errors.minlength\\\" class=\\\"validation-message\\\">Enter atleast 4 characters.</label>\\n    </div>\\n    <input type=\\\"submit\\\" value=\\\"Login\\\">\\n</form>\\n\\n\\n<!-- Error message -->\\n<br/>\\n<p style=\\\"color: darkred;\\\">{{message}}</p>\\n<br/>\";","//builtin imports\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {AppRoutingModule } from './app-routing.module';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport {UserService} from \"./shared/user.service\";\nimport {AuthInterceptor} from './shared/auth-interceptor';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {NgxAutoScrollModule} from \"ngx-auto-scroll\";\nimport {MatListModule} from \"@angular/material/list\";\n\n\n//components\nimport { AppComponent } from './app.component';\nimport { UserComponent } from './user/user.component';\nimport { SignUpComponent } from './user/sign-up/sign-up.component';\nimport { AdminComponent } from './admin/admin.component';\nimport {AdminLoginComponent} from \"./admin/admin-login/admin-login.component\";\nimport { CitiesComponent } from './admin/cities/cities.component';\nimport { FlightsComponent } from './admin/flights/flights.component';\nimport { LoginComponent } from './user/login/login.component';\nimport { FlightPlanComponent } from './user/flight-plan/flight-plan.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    UserComponent,\n    SignUpComponent,\n    AdminComponent,\n    AdminLoginComponent,\n    CitiesComponent,\n    FlightsComponent,\n    LoginComponent,\n    FlightPlanComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatCardModule,\n    MatSelectModule,\n    NgxAutoScrollModule,\n    MatListModule\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true}\n    , UserService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJmbGlnaHQtcGxhbi5jb21wb25lbnQuY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport {Subscription} from \"rxjs\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {City} from \"../../shared/city.model\";\nimport {AdminService} from \"../../shared/admin.service\";\n\n@Component({\n  selector: 'app-flight-plan',\n  templateUrl: './flight-plan.component.html',\n  styleUrls: ['./flight-plan.component.css']\n})\nexport class FlightPlanComponent implements OnInit {\n  origins: City[] = [];\n  private originSub: Subscription;\n\n  destinations: City[] = [];\n  private destinationSub: Subscription;\n  form = new FormGroup({\n    OriginControl: new FormControl('', Validators.required),\n    DestinationControl: new FormControl('', Validators.required),\n    CostControl: new FormControl('', Validators.required)\n  });\n  showSucessMessage: boolean;\n  serverErrorMessages: string;\n  successMessage : string;\n  constructor(public adminService: AdminService) { }\n\n  ngOnInit(): void {\n    this.adminService.getOrigins();\n    this.originSub = this.adminService.getOriginsUpdateListener()\n        .subscribe((originData: { origins: City[] }) => {\n          this.origins = originData.origins;\n        });\n  }\n\n\n  getDestinations(event: any) {\n    this.adminService.getDestinations(event._id);\n    this.destinationSub = this.adminService.getDestinationsUpdateListener()\n        .subscribe((destinationData: { destinations: City[] }) => {\n          this.destinations = destinationData.destinations;\n        });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzaWduLXVwLmNvbXBvbmVudC5jc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1c2VyLmNvbXBvbmVudC5jc3MifQ== */\";","export default \"\\n<form #signUpForm=\\\"ngForm\\\" (ngSubmit)=\\\"signUpForm.valid && onSubmit(signUpForm)\\\">\\n    <input type=\\\"text\\\" #fullName=\\\"ngModel\\\" [(ngModel)]=\\\"userService.selectedUser.fullName\\\" name=\\\"fullName\\\" placeholder=\\\"Full Name\\\"\\n           required  [ngClass]=\\\"{'invalid-textbox' :signUpForm.submitted && !fullName.valid }\\\">\\n    <div *ngIf=\\\"signUpForm.submitted && !fullName.valid\\\">\\n        <label class=\\\"validation-message\\\">This field is required.</label>\\n    </div>\\n    <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"userService.selectedUser.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\"\\n           required [pattern]=\\\"emailRegex\\\"  [ngClass]=\\\"{'invalid-textbox' :signUpForm.submitted && !email.valid }\\\">\\n    <div *ngIf=\\\"signUpForm.submitted && email.errors\\\">\\n        <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\n        <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\n    </div>\\n    <input type=\\\"password\\\" #password=\\\"ngModel\\\" [(ngModel)]=\\\"userService.selectedUser.password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\n           minlength=\\\"4\\\" required [ngClass]=\\\"{'invalid-textbox' :signUpForm.submitted && !password.valid }\\\">\\n    <div *ngIf=\\\"signUpForm.submitted && password.errors\\\">\\n        <label *ngIf=\\\"password.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\n        <label *ngIf=\\\"password.errors.minlength\\\" class=\\\"validation-message\\\">Enter atleast 4 characters.</label>\\n    </div>\\n    <input type=\\\"submit\\\" value=\\\"Sign Up\\\">\\n</form>\\n\\n<!-- Success message -->\\n<div class=\\\"success\\\" *ngIf=\\\"showSucessMessage\\\">\\n    Saved successfully\\n</div>\\n\\n<!-- Error message -->\\n<div class=\\\"alert\\\" *ngIf=\\\"serverErrorMessages\\\">\\n    {{serverErrorMessages}}\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhZG1pbi1sb2dpbi5jb21wb25lbnQuY3NzIn0= */\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport {SignUpComponent} from \"./user/sign-up/sign-up.component\";\nimport {UserComponent} from \"./user/user.component\";\nimport {AdminComponent} from \"./admin/admin.component\";\nimport {AdminLoginComponent} from \"./admin/admin-login/admin-login.component\";\nimport {CitiesComponent} from \"./admin/cities/cities.component\";\nimport {FlightsComponent} from \"./admin/flights/flights.component\";\nimport {LoginComponent} from \"./user/login/login.component\";\nimport {FlightPlanComponent} from \"./user/flight-plan/flight-plan.component\";\nimport {AuthGuard} from \"./shared/auth.guard\";\n\nconst routes: Routes = [\n  {\n    path: 'signup', component: UserComponent,\n    children: [{\n      path: '', component: SignUpComponent\n    }]\n  },\n  {\n    path: 'login', component: UserComponent,\n    children: [{\n      path: '', component: LoginComponent\n    }]\n  },\n  {\n    path: '', redirectTo: '/login', pathMatch:  'full'\n  },\n  {\n    path: 'admin', component: AdminComponent,\n    children: [{\n      path: '', component: AdminLoginComponent\n    }]\n  },\n  {\n    path: 'cities', component: CitiesComponent\n  },\n  {\n    path: 'flights', component: FlightsComponent\n  },\n  {\n    path: 'flightplan', component: FlightPlanComponent , canActivate: [AuthGuard]\n  },\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers: [AuthGuard]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuY3NzIn0= */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhZG1pbi5jb21wb25lbnQuY3NzIn0= */\";","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}
{"version":3,"sources":["./src/app/user/login/login.component.ts","./src/app/admin/flights/flights.component.html","./src/app/admin/cities/cities.component.css","./src/app/shared/admin.service.ts","./src/app/user/user.component.ts","./src/app/admin/cities/cities.component.ts","./src/app/app.component.css","./src/environments/environment.ts","./src/app/shared/user.service.ts","./src/app/shared/auth.guard.ts","./src/app/admin/cities/cities.component.html","./src/app/admin/admin-login/admin-login.component.ts","./src/app/user/flight-plan/flight-plan.component.html","./src/app/user/user.component.html","./src/app/admin/flights/flights.component.ts","./src/app/admin/flights/flights.component.css","./src/app/admin/admin.component.html","./src/app/user/sign-up/sign-up.component.ts","./src/app/app.component.ts","./src/app/admin/admin.component.ts","./src/app/shared/auth-interceptor.ts","./src/app/admin/admin-login/admin-login.component.html","./src/app/app.component.html","./src/app/user/login/login.component.html","./src/app/app.module.ts","./src/app/user/flight-plan/flight-plan.component.css","./src/app/user/flight-plan/flight-plan.component.ts","./src/app/user/sign-up/sign-up.component.css","./src/app/user/user.component.css","./src/app/user/sign-up/sign-up.component.html","./src/app/admin/admin-login/admin-login.component.css","./src/app/app-routing.module.ts","./src/app/user/login/login.component.css","./src/app/admin/admin.component.css","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport {Router} from '@angular/router';\n\n\nimport {UserService} from \"../../shared/user.service\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  message = '';\n  constructor(private userService: UserService, private router: Router) {\n    this.userService.getLoginErrors().subscribe(error => {\n      this.message = error;\n    });\n  }\n\n  ngOnInit(): void {\n    if (this.userService.getIsAuth()) {\n      this.router.navigate(['/flightplan']);\n    }\n  }\n\n  onLogin(form: NgForm) {\n    console.log(form.value.email + '' + form.value.password);\n    if (form.invalid) {\n      return;\n    }\n    this.userService.login(form.value.email, form.value.password)\n  }\n\n}\n","export default \"\\n<mat-card style=\\\"width: 40%;\\\">\\n    <form [formGroup]=\\\"form\\\" (submit)=\\\"onSaveFlight()\\\" >\\n        <table>\\n            <tr>\\n<mat-form-field appearance=\\\"fill\\\">\\n    <mat-label>Origin</mat-label>\\n    <mat-select formControlName=\\\"OriginControl\\\" required (selectionChange)=\\\"getDestinations($event.value)\\\">\\n        <mat-option>--</mat-option>\\n        <mat-option *ngFor=\\\"let origin of origins\\\" [value]=\\\"origin\\\">\\n            {{origin.name}}\\n        </mat-option>\\n    </mat-select>\\n    <mat-error *ngIf=\\\"form.get('OriginControl').invalid\\\">Please select an Origin.</mat-error>\\n\\n\\n</mat-form-field>\\n            </tr>\\n            <tr>\\n    <mat-form-field appearance=\\\"fill\\\">\\n\\n    <mat-label>Destination</mat-label>\\n    <mat-select formControlName=\\\"DestinationControl\\\" required >\\n        <mat-option>--</mat-option>\\n        <mat-option *ngFor=\\\"let destination of destinations\\\" [value]=\\\"destination\\\">\\n            {{destination.name}}\\n        </mat-option>\\n    </mat-select>\\n        <mat-error *ngIf=\\\"form.get('DestinationControl').invalid\\\">Please select a Destination.</mat-error>\\n    </mat-form-field>\\n            </tr>\\n            <tr>\\n    <mat-form-field>\\n        <mat-label>Cost</mat-label>\\n        <input\\n                matInput\\n                type=\\\"number\\\"\\n                formControlName=\\\"CostControl\\\"\\n                placeholder=\\\"40000\\\"\\n        >\\n        <mat-error *ngIf=\\\"form.get('CostControl').invalid\\\">Please enter a Cost.</mat-error>\\n    </mat-form-field>\\n            </tr>\\n            <tr>\\n        <input type=\\\"submit\\\" value=\\\"Save Flight\\\">\\n            </tr>\\n        </table>\\n    </form>\\n\\n    <div class=\\\"success\\\" *ngIf=\\\"showSucessMessage\\\">\\n        {{successMessage}}\\n    </div>\\n\\n    <!-- Error message -->\\n    <div class=\\\"alert\\\" *ngIf=\\\"serverErrorMessages\\\">\\n        {{serverErrorMessages}}\\n    </div>\\n\\n\\n</mat-card>\";","export default \".custom-scroll-bar{\\r\\n    height:30vh;\\r\\n    overflow-y:scroll;\\r\\n    overflow-x: hidden;\\r\\n}\\r\\n\\r\\n.custom-scroll-bar::-webkit-scrollbar{\\r\\n    width: 5px;\\r\\n}\\r\\n\\r\\n.custom-scroll-bar::-webkit-scrollbar-thumb{\\r\\n    background: rgba(0,0,0,.26);\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNpdGllcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksV0FBVztJQUNYLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSwyQkFBMkI7QUFDL0IiLCJmaWxlIjoiY2l0aWVzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY3VzdG9tLXNjcm9sbC1iYXJ7XHJcbiAgICBoZWlnaHQ6MzB2aDtcclxuICAgIG92ZXJmbG93LXk6c2Nyb2xsO1xyXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG59XHJcblxyXG4uY3VzdG9tLXNjcm9sbC1iYXI6Oi13ZWJraXQtc2Nyb2xsYmFye1xyXG4gICAgd2lkdGg6IDVweDtcclxufVxyXG5cclxuLmN1c3RvbS1zY3JvbGwtYmFyOjotd2Via2l0LXNjcm9sbGJhci10aHVtYntcclxuICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsLjI2KTtcclxufSJdfQ== */\";","import { Injectable } from '@angular/core';\n\nimport {Router} from '@angular/router';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {map} from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n\nimport { environment } from '../../environments/environment';\nimport {City} from \"./city.model\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  isadmin = false;\n\n  private origins: City [] = [];\n  private originsUpdated = new Subject<{origins: City[], maxCities: number}>();\n  private destinations: City [] = [];\n  private destinationsUpdated = new Subject<{destinations: City[], maxCities: number}>();\n  constructor(private http: HttpClient, private router: Router) { }\n    selectedCity: City = {\n      _id: '',\n        name: '',\n        country: '',\n    };\n\n  login(userName: string, password: string) {\n    this.http.post<{message: string}>(\n        environment.apiBaseUrl+'/admin/login',\n        {userName, password})\n        .subscribe( response => {\n           this.isadmin = true;\n          this.router.navigate(['/cities']).then();\n        } , error => {\n          console.log('invalid admin');\n            this.isadmin = false;\n          this.router.navigate(['/admin']).then();\n        });\n\n  }\n\n  addCity(name: string, country: string)\n  {\n      console.log(name + '' + country);\n      return this.http.post(environment.apiBaseUrl+'/admin/city',\n          {name, country});\n  }\n\n    addFlight(origin: string, destination: string, cost: number)\n    {\n        console.log(origin + '' + destination + '' + cost);\n        return this.http.post(environment.apiBaseUrl+'/admin/addflight',\n            {origin, destination, cost});\n    }\n\n    getOrigins() {\n        this.http\n            .get<{message: string, cities: any, maxCities: number}>(\n                environment.apiBaseUrl+'/admin/getOrigin'\n            )\n            .pipe(map((originData) => {\n                return { origins: originData.cities.map((origin: { name: any; _id: any; }) => {\n                        return {\n                            name: origin.name,\n                            _id: origin._id,\n                        };\n                    }), maxCities: originData.maxCities  };\n            }))// change rterieving data\n            .subscribe(transformedOriginsData => {\n                this.origins = transformedOriginsData.origins;\n                this.originsUpdated.next({\n                    origins: [...this.origins],\n                        maxCities: transformedOriginsData.maxCities\n                    }\n                );\n            });\n    }\n\n    getOriginsUpdateListener() {\n        return this.originsUpdated.asObservable();\n    }\n\n    getDestinations(id: string) {\n      console.log(id);\n        this.http\n            .get<{message: string, cities: any, maxCities: number}>(\n                environment.apiBaseUrl+'/admin/getDestination/'+ id\n            )\n            .pipe(map((destinationData) => {\n                return { destinations: destinationData.cities.map((destination: { name: any; _id: any; }) => {\n                        return {\n                            name: destination.name,\n                            _id: destination._id,\n                        };\n                    }), maxCities: destinationData.maxCities  };\n            }))// change rterieving data\n            .subscribe(transformedDestinationsData => {\n                this.destinations = transformedDestinationsData.destinations;\n                this.destinationsUpdated.next({\n                    destinations: [...this.destinations],\n                        maxCities: transformedDestinationsData.maxCities\n                    }\n                );\n            });\n    }\n\n    getDestinationsUpdateListener() {\n        return this.destinationsUpdated.asObservable();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport {NgForm} from \"@angular/forms\";\nimport {AdminService} from \"../../shared/admin.service\";\nimport {Subscription} from \"rxjs\";\n\nimport {City} from \"../../shared/city.model\";\n\n@Component({\n  selector: 'app-cities',\n  templateUrl: './cities.component.html',\n  styleUrls: ['./cities.component.css']\n})\nexport class CitiesComponent implements OnInit {\n  showSucessMessage: boolean;\n  serverErrorMessages: string;\n\n    origins: City[] = [];\n    private originSub: Subscription;\n  constructor(public adminService: AdminService) { }\n\n  ngOnInit(): void {\n      this.adminService.getOrigins();\n      this.originSub = this.adminService.getOriginsUpdateListener()\n          .subscribe((originData: { origins: City[] }) => {\n              this.origins = originData.origins;\n          });\n  }\n\n  addCity(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n    this.adminService.addCity(form.value.cityName, form.value.countryname).subscribe(\n        res => {\n          this.showSucessMessage = true;\n          setTimeout(() => this.showSucessMessage = false, 4000);\n          this.adminService.getOrigins();\n          this.resetForm(form);\n        },\n        err => {\n            this.serverErrorMessages = 'Something went wrong';\n        }\n    );\n  }\n\n  resetForm(form: NgForm) {\n    this.adminService.selectedCity = {\n        _id: '',\n      name: '',\n      country: ''\n    };\n    form.resetForm();\n    this.serverErrorMessages = '';\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LmNzcyJ9 */\";","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiBaseUrl: 'http://localhost:3000/api'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {Subject} from 'rxjs';\n\nimport {Router} from '@angular/router';\n\n\nimport { environment } from '../../environments/environment';\nimport {User} from './user.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private logInErrorSubject = new Subject<string>();\n  private isAuthenticated = false;\n  private isadvertiserAuthenticated = false;\n  private token: any;\n  private tokenTimer: any;\n  private userId: any;\n  private authStatusListener = new Subject<boolean>();\n  userN: any;\n  message: any;\n  selectedUser: User = {\n    fullName: '',\n    email: '',\n    password: ''\n  };\n  constructor(private http: HttpClient, private router: Router) { }\n  public getLoginErrors(): Subject <string> {\n    return this.logInErrorSubject;\n  }\n  getToken() {\n    return this .token;\n  }\n\n  getName() {\n    return localStorage.getItem('username');\n  }\n  getIsAuth() {\n    return this.isAuthenticated;\n  }\n\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n\n  getUserId() {\n    return this.userId;\n  }\n  getMessage() {\n    console.log(this.message);\n    return this.message;\n  }\n\n  postUser(user: User){\n    return this.http.post(environment.apiBaseUrl+'/user/register',user);\n  }\n\n\n  login(email: string, password: string) {\n    return this.http.post<{token: string, expiresIn: number, userId: string, username: string}>(\n        environment.apiBaseUrl+ '/user/login',\n        {email, password})\n        .subscribe( response => {\n          const token = response.token;\n          console.log(response);\n          this.token = token;\n          if (token) {\n            const expiresInDuration = response.expiresIn;\n            this.setAuthTimer(expiresInDuration);\n            this.isAuthenticated = true;\n            this.userId = response.userId;\n            this.userN = response.username;\n            this.authStatusListener.next(true);\n            const now = new Date();\n            const expirationDate = new Date(now.getTime() + (expiresInDuration * 100000));\n            this.saveAuthData( token, expirationDate,\n                this.userId, this.userN);\n            this.message = '';\n            this.logInErrorSubject.next(this.message);\n            this.router.navigate(['/flightplan']).then();\n          }\n        } , error => {\n          this.message = 'invalid Email or Password';\n          this.logInErrorSubject.next(this.message);\n          console.log('error');\n        });\n\n  }\n\n  private setAuthTimer( duration: number ) {\n    console.log('Setting timer:' + duration);\n    this.tokenTimer = setTimeout(() => {\n          this.logout();\n        },\n        duration * 100000);\n  }\n\n  private saveAuthData(token: string, expirationDate: Date, userId: string, userNam: string) {\n    localStorage.setItem('token', token);\n    localStorage.setItem('expiration', expirationDate.toISOString());\n    localStorage.setItem('userId', userId);\n    localStorage.setItem('username', userNam);\n  }\n\n  private clearAuthData() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expiration');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('username');\n  }\n\n  logout() {\n    this.token = null;\n    this.isAuthenticated = false;\n    this.authStatusListener.next(false);\n    this.userId = null;\n    this.userN = null;\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n    this.router.navigate(['/']);\n\n  }\n\n}\n","import {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {Injectable} from '@angular/core';\nimport {UserService} from \"./user.service\";\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: UserService, private router: Router) {}\n\n  canActivate(\n      route: ActivatedRouteSnapshot,\n      state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    const isAuth = this.authService.getIsAuth();\n    if (!isAuth) {\n      this.router.navigate(['/login']);\n    }\n    return true;\n  }\n}","export default \"\\r\\n<mat-card style=\\\"width: 40%;\\\">\\r\\n    <form #cityForm=\\\"ngForm\\\" (ngSubmit)=\\\"cityForm.valid && addCity(cityForm)\\\">\\r\\n        <input type=\\\"text\\\" #cityName=\\\"ngModel\\\" [(ngModel)]=\\\"adminService.selectedCity.name\\\" name=\\\"cityName\\\" placeholder=\\\"City Name\\\"\\r\\n               required  [ngClass]=\\\"{'invalid-textbox' :cityForm.submitted && !cityName.valid }\\\">\\r\\n        <div *ngIf=\\\"cityForm.submitted && !cityName.valid\\\">\\r\\n            <label class=\\\"validation-message\\\">This field is required.</label>\\r\\n        </div>\\r\\n        <input type=\\\"text\\\" #countryname=\\\"ngModel\\\" [(ngModel)]=\\\"adminService.selectedCity.country\\\" name=\\\"countryname\\\" placeholder=\\\"Country Name\\\"\\r\\n                required [ngClass]=\\\"{'invalid-textbox' :cityForm.submitted && !countryname.valid }\\\">\\r\\n        <div *ngIf=\\\"cityForm.submitted && countryname.errors\\\">\\r\\n            <label *ngIf=\\\"countryname.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\r\\n           </div>\\r\\n        <input type=\\\"submit\\\" value=\\\"Add City\\\">\\r\\n    </form>\\r\\n\\r\\n    <!-- Success message -->\\r\\n    <div class=\\\"success\\\" *ngIf=\\\"showSucessMessage\\\">\\r\\n        Saved successfully\\r\\n    </div>\\r\\n\\r\\n    <!-- Error message -->\\r\\n    <div class=\\\"alert\\\" *ngIf=\\\"serverErrorMessages\\\">\\r\\n        {{serverErrorMessages}}\\r\\n    </div>\\r\\n\\r\\n    <mat-list role=\\\"list\\\" class=\\\"custom-scroll-bar\\\">\\r\\n        <mat-list-item *ngFor=\\\"let item of origins\\\"> {{item.name}}</mat-list-item>\\r\\n    </mat-list>\\r\\n</mat-card>\\r\\n\";","import { Component, OnInit } from '@angular/core';\nimport {NgForm} from \"@angular/forms\";\nimport {AdminService} from \"../../shared/admin.service\";\n@Component({\n  selector: 'app-admin-login',\n  templateUrl: './admin-login.component.html',\n  styleUrls: ['./admin-login.component.css']\n})\nexport class AdminLoginComponent implements OnInit {\n\n  constructor(private adminService: AdminService) { }\n\n  ngOnInit(): void {\n  }\n\n  onLogin(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n    this.adminService.login(form.value.email, form.value.password);\n  }\n}\n","export default \"\\n<mat-card style=\\\"width: 40%;\\\">\\n    <form [formGroup]=\\\"form\\\" (submit)=\\\"getPlans\\\" >\\n        <table>\\n            <tr>\\n                <mat-form-field appearance=\\\"fill\\\">\\n                    <mat-label>Origin</mat-label>\\n                    <mat-select formControlName=\\\"OriginControl\\\" required (selectionChange)=\\\"getDestinations($event.value)\\\">\\n                        <mat-option>--</mat-option>\\n                        <mat-option *ngFor=\\\"let origin of origins\\\" [value]=\\\"origin\\\">\\n                            {{origin.name}}\\n                        </mat-option>\\n                    </mat-select>\\n                    <mat-error *ngIf=\\\"form.get('OriginControl').invalid\\\">Please select an Origin.</mat-error>\\n\\n\\n                </mat-form-field>\\n            </tr>\\n            <tr>\\n                <mat-form-field appearance=\\\"fill\\\">\\n\\n                    <mat-label>Destination</mat-label>\\n                    <mat-select formControlName=\\\"DestinationControl\\\" required >\\n                        <mat-option>--</mat-option>\\n                        <mat-option *ngFor=\\\"let destination of destinations\\\" [value]=\\\"destination\\\">\\n                            {{destination.name}}\\n                        </mat-option>\\n                    </mat-select>\\n                    <mat-error *ngIf=\\\"form.get('DestinationControl').invalid\\\">Please select a Destination.</mat-error>\\n                </mat-form-field>\\n            </tr>\\n\\n            <tr>\\n                <input type=\\\"submit\\\" value=\\\"Generate Plan\\\">\\n            </tr>\\n        </table>\\n    </form>\\n\\n    <div class=\\\"success\\\" *ngIf=\\\"showSucessMessage\\\">\\n        {{successMessage}}\\n    </div>\\n\\n    <!-- Error message -->\\n    <div class=\\\"alert\\\" *ngIf=\\\"serverErrorMessages\\\">\\n        {{serverErrorMessages}}\\n    </div>\\n\\n\\n</mat-card>\";","export default \"\\n<div class=\\\"wrapper fadeInDown\\\">\\n    <div id=\\\"formContent\\\">\\n        <h2 class=\\\"inactive underlineHover\\\">User</h2>\\n        <router-outlet></router-outlet>\\n    </div>\\n</div>\";","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, NgForm, Validators} from '@angular/forms';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {AdminService} from \"../../shared/admin.service\";\n\n\n\ninterface City {\n  name: string;\n  _id: string;\n}\n\n@Component({\n  selector: 'app-flights',\n  templateUrl: './flights.component.html',\n  styleUrls: ['./flights.component.css']\n})\nexport class FlightsComponent implements OnInit {\n\n  origins: City[] = [];\n  private originSub: Subscription;\n\n  destinations: City[] = [];\n  private destinationSub: Subscription;\n  form = new FormGroup({\n    OriginControl: new FormControl('', Validators.required),\n    DestinationControl: new FormControl('', Validators.required),\n    CostControl: new FormControl('', Validators.required)\n  });\n  showSucessMessage: boolean;\n  serverErrorMessages: string;\n  successMessage : string;\n\n  constructor(public adminService: AdminService) {\n  }\n\n  ngOnInit(): void {\n    this.adminService.getOrigins();\n    this.originSub = this.adminService.getOriginsUpdateListener()\n        .subscribe((originData: { origins: City[] }) => {\n          this.origins = originData.origins;\n        });\n  }\n\n\n\n  getDestinations(event: any) {\n    this.adminService.getDestinations(event._id);\n    this.destinationSub = this.adminService.getDestinationsUpdateListener()\n        .subscribe((destinationData: { destinations: City[] }) => {\n          this.destinations = destinationData.destinations;\n        });\n  }\n\n  onSaveFlight() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.adminService.addFlight(this.form.value.OriginControl._id,\n        this.form.value.DestinationControl._id,\n        this.form.value.CostControl).subscribe(\n        res => {\n          this.showSucessMessage = true;\n          setTimeout(() => this.showSucessMessage = false, 4000);\n          this.form.reset();\n        },\n        err => {\n          this.serverErrorMessages = 'Something went wrong';\n        }\n    );\n\n\n  }\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJmbGlnaHRzLmNvbXBvbmVudC5jc3MifQ== */\";","export default \"\\n<div class=\\\"wrapper\\\">\\n    <div id=\\\"formContent\\\">\\n        <h2 class=\\\"inactive underlineHover\\\">Admin</h2>\\n        <router-outlet></router-outlet>\\n    </div>\\n</div>\";","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport {UserService} from \"../../shared/user.service\";\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css'],\n  providers : [UserService]\n})\nexport class SignUpComponent implements OnInit {\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  showSucessMessage: boolean;\n  serverErrorMessages: string;\n\n  constructor(public userService: UserService) { }\n\n  ngOnInit(): void {\n  }\n  onSubmit(form: NgForm) {\n    this.userService.postUser(form.value).subscribe(\n        res => {\n          this.showSucessMessage = true;\n          setTimeout(() => this.showSucessMessage = false, 4000);\n          this.resetForm(form);\n        },\n        err => {\n          if (err.status === 422) {\n            this.serverErrorMessages = err.error.join('<br/>');\n          }\n          else\n            this.serverErrorMessages = 'Something went wrong';\n        }\n    );\n  }\n\n  resetForm(form: NgForm) {\n    this.userService.selectedUser = {\n      fullName: '',\n      email: '',\n      password: ''\n    };\n    form.resetForm();\n    this.serverErrorMessages = '';\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'AngularFrontEnd';\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import {HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\nimport {Injectable} from '@angular/core';\r\nimport {UserService} from \"./user.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n    constructor(private authService: UserService) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n        const authToken = this.authService.getToken();\r\n        const authRequest = req.clone({\r\n            headers: req.headers.set('authorization', 'Bearer ' + authToken)\r\n        });\r\n        return next.handle(authRequest);\r\n    }\r\n}","export default \"\\n\\n    <form (submit)=\\\"onLogin(loginForm)\\\" #loginForm=\\\"ngForm\\\" >\\n            <input\\n                    type=\\\"text\\\"\\n                    placeholder=\\\"admin username\\\"\\n                    name=\\\"email\\\"\\n                    ngModel\\n                    #emailInput=\\\"ngModel\\\"\\n                    required\\n\\n            >\\n        <div *ngIf=\\\"loginForm.submitted && !emailInput.valid\\\">\\n            <label class=\\\"validation-message\\\">This field is required.</label>\\n        </div>\\n            <input\\n                    type=\\\"password\\\"\\n                    placeholder=\\\"Password\\\"\\n                    name=\\\"password\\\"\\n                    ngModel\\n                    #passwordInput=\\\"ngModel\\\"\\n                    required\\n\\n            >\\n        <div *ngIf=\\\"loginForm.submitted && passwordInput.errors\\\">\\n            <label *ngIf=\\\"passwordInput.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\n        </div>\\n\\n        <input type=\\\"submit\\\" value=\\\"Login\\\">\\n\\n    </form>\";","export default \"<router-outlet></router-outlet>\";","export default \"<form #signUpForm=\\\"ngForm\\\" (ngSubmit)=\\\"signUpForm.valid && onLogin(signUpForm)\\\">\\n    <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"userService.selectedUser.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\"\\n           required [pattern]=\\\"emailRegex\\\"  [ngClass]=\\\"{'invalid-textbox' :signUpForm.submitted && !email.valid }\\\">\\n    <div *ngIf=\\\"signUpForm.submitted && email.errors\\\">\\n        <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\n        <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\n    </div>\\n    <input type=\\\"password\\\" #password=\\\"ngModel\\\" [(ngModel)]=\\\"userService.selectedUser.password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\n           minlength=\\\"4\\\" required [ngClass]=\\\"{'invalid-textbox' :signUpForm.submitted && !password.valid }\\\">\\n    <div *ngIf=\\\"signUpForm.submitted && password.errors\\\">\\n        <label *ngIf=\\\"password.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\n        <label *ngIf=\\\"password.errors.minlength\\\" class=\\\"validation-message\\\">Enter atleast 4 characters.</label>\\n    </div>\\n    <input type=\\\"submit\\\" value=\\\"Login\\\">\\n</form>\\n\\n\\n<!-- Error message -->\\n<br/>\\n<p style=\\\"color: darkred;\\\">{{message}}</p>\\n<br/>\";","//builtin imports\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {AppRoutingModule } from './app-routing.module';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport {UserService} from \"./shared/user.service\";\nimport {AuthInterceptor} from './shared/auth-interceptor';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {NgxAutoScrollModule} from \"ngx-auto-scroll\";\nimport {MatListModule} from \"@angular/material/list\";\n\n\n//components\nimport { AppComponent } from './app.component';\nimport { UserComponent } from './user/user.component';\nimport { SignUpComponent } from './user/sign-up/sign-up.component';\nimport { AdminComponent } from './admin/admin.component';\nimport {AdminLoginComponent} from \"./admin/admin-login/admin-login.component\";\nimport { CitiesComponent } from './admin/cities/cities.component';\nimport { FlightsComponent } from './admin/flights/flights.component';\nimport { LoginComponent } from './user/login/login.component';\nimport { FlightPlanComponent } from './user/flight-plan/flight-plan.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    UserComponent,\n    SignUpComponent,\n    AdminComponent,\n    AdminLoginComponent,\n    CitiesComponent,\n    FlightsComponent,\n    LoginComponent,\n    FlightPlanComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatCardModule,\n    MatSelectModule,\n    NgxAutoScrollModule,\n    MatListModule\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true}\n    , UserService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJmbGlnaHQtcGxhbi5jb21wb25lbnQuY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport {Subscription} from \"rxjs\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {City} from \"../../shared/city.model\";\nimport {AdminService} from \"../../shared/admin.service\";\n\n@Component({\n  selector: 'app-flight-plan',\n  templateUrl: './flight-plan.component.html',\n  styleUrls: ['./flight-plan.component.css']\n})\nexport class FlightPlanComponent implements OnInit {\n  origins: City[] = [];\n  private originSub: Subscription;\n\n  destinations: City[] = [];\n  private destinationSub: Subscription;\n  form = new FormGroup({\n    OriginControl: new FormControl('', Validators.required),\n    DestinationControl: new FormControl('', Validators.required),\n    CostControl: new FormControl('', Validators.required)\n  });\n  showSucessMessage: boolean;\n  serverErrorMessages: string;\n  successMessage : string;\n  constructor(public adminService: AdminService) { }\n\n  ngOnInit(): void {\n    this.adminService.getOrigins();\n    this.originSub = this.adminService.getOriginsUpdateListener()\n        .subscribe((originData: { origins: City[] }) => {\n          this.origins = originData.origins;\n        });\n  }\n\n\n  getDestinations(event: any) {\n    this.adminService.getDestinations(event._id);\n    this.destinationSub = this.adminService.getDestinationsUpdateListener()\n        .subscribe((destinationData: { destinations: City[] }) => {\n          this.destinations = destinationData.destinations;\n        });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzaWduLXVwLmNvbXBvbmVudC5jc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1c2VyLmNvbXBvbmVudC5jc3MifQ== */\";","export default \"\\n<form #signUpForm=\\\"ngForm\\\" (ngSubmit)=\\\"signUpForm.valid && onSubmit(signUpForm)\\\">\\n    <input type=\\\"text\\\" #fullName=\\\"ngModel\\\" [(ngModel)]=\\\"userService.selectedUser.fullName\\\" name=\\\"fullName\\\" placeholder=\\\"Full Name\\\"\\n           required  [ngClass]=\\\"{'invalid-textbox' :signUpForm.submitted && !fullName.valid }\\\">\\n    <div *ngIf=\\\"signUpForm.submitted && !fullName.valid\\\">\\n        <label class=\\\"validation-message\\\">This field is required.</label>\\n    </div>\\n    <input type=\\\"text\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"userService.selectedUser.email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\"\\n           required [pattern]=\\\"emailRegex\\\"  [ngClass]=\\\"{'invalid-textbox' :signUpForm.submitted && !email.valid }\\\">\\n    <div *ngIf=\\\"signUpForm.submitted && email.errors\\\">\\n        <label *ngIf=\\\"email.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\n        <label *ngIf=\\\"email.errors.pattern\\\" class=\\\"validation-message\\\">Invalid email address.</label>\\n    </div>\\n    <input type=\\\"password\\\" #password=\\\"ngModel\\\" [(ngModel)]=\\\"userService.selectedUser.password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\n           minlength=\\\"4\\\" required [ngClass]=\\\"{'invalid-textbox' :signUpForm.submitted && !password.valid }\\\">\\n    <div *ngIf=\\\"signUpForm.submitted && password.errors\\\">\\n        <label *ngIf=\\\"password.errors.required\\\" class=\\\"validation-message\\\">This field is required.</label>\\n        <label *ngIf=\\\"password.errors.minlength\\\" class=\\\"validation-message\\\">Enter atleast 4 characters.</label>\\n    </div>\\n    <input type=\\\"submit\\\" value=\\\"Sign Up\\\">\\n</form>\\n\\n<!-- Success message -->\\n<div class=\\\"success\\\" *ngIf=\\\"showSucessMessage\\\">\\n    Saved successfully\\n</div>\\n\\n<!-- Error message -->\\n<div class=\\\"alert\\\" *ngIf=\\\"serverErrorMessages\\\">\\n    {{serverErrorMessages}}\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhZG1pbi1sb2dpbi5jb21wb25lbnQuY3NzIn0= */\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport {SignUpComponent} from \"./user/sign-up/sign-up.component\";\nimport {UserComponent} from \"./user/user.component\";\nimport {AdminComponent} from \"./admin/admin.component\";\nimport {AdminLoginComponent} from \"./admin/admin-login/admin-login.component\";\nimport {CitiesComponent} from \"./admin/cities/cities.component\";\nimport {FlightsComponent} from \"./admin/flights/flights.component\";\nimport {LoginComponent} from \"./user/login/login.component\";\nimport {FlightPlanComponent} from \"./user/flight-plan/flight-plan.component\";\nimport {AuthGuard} from \"./shared/auth.guard\";\n\nconst routes: Routes = [\n  {\n    path: 'signup', component: UserComponent,\n    children: [{\n      path: '', component: SignUpComponent\n    }]\n  },\n  {\n    path: 'login', component: UserComponent,\n    children: [{\n      path: '', component: LoginComponent\n    }]\n  },\n  {\n    path: '', redirectTo: '/login', pathMatch:  'full'\n  },\n  {\n    path: 'admin', component: AdminComponent,\n    children: [{\n      path: '', component: AdminLoginComponent\n    }]\n  },\n  {\n    path: 'cities', component: CitiesComponent\n  },\n  {\n    path: 'flights', component: FlightsComponent\n  },\n  {\n    path: 'flightplan', component: FlightPlanComponent , canActivate: [AuthGuard]\n  },\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers: [AuthGuard]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuY3NzIn0= */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhZG1pbi5jb21wb25lbnQuY3NzIn0= */\";","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}